/* You can add global styles to this file, and also import other style files */

@use "variables" as variables;
@use "sass:color";

@import url(https://fonts.bunny.net/css?family=atkinson-hyperlegible:400,400i,700,700i);

html,
body {
  font-family: "Atkinson Hyperlegible", sans-serif;
  background-color: rgb(27, 25, 27);
  color: variables.$font-color;
  margin: 0;
  height: 100%;
}

h1 {
  margin-block-start: 0px;
}

h2 {
  margin-block-start: 0px;
  margin-block-end: 4px;
}

h3 {
  margin-block-start: 0px;
  margin-block-end: 4px;
}

::selection {
  background-color: variables.$font-color;
  text-shadow: none;
  color: variables.$opposite-font-color;
}

.cdk-overlay-pane ::selection {
  background-color: variables.$opposite-font-color;
  color: variables.$font-color;
}

.page-container {
  padding-bottom: 30px;
}

.page-description {
  margin-block-start: 5px;
}

.page-description-container {
  padding-bottom: 10px;
}

.page-description-content {
  text-align: center;
  width: 70%;
  max-width: variables.$max-width - 50px;
  min-width: variables.$min-width;
}

.shrinkable {
  transition: transform 0.2s ease;
}

.shrink {
  transform: scale(0.4);
  height: 80px;
}

.webrings {
  text-align: center;
  font-size: 16px;
}

a {
  color: variables.$link-color;
}
a:visited {
  color: variables.$link-color;
}

.page-description-content a {
  color: white;
}

.page-description-content a:visited {
  color: white;
}

.page-description-content a:active {
  color: white;
}

.page-description-container,
.content-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

.card-title {
  text-align: center;
}

.content-container-card {
  text-align: left;
  padding-left: variables.$card-horizontal-padding;
  padding-right: variables.$card-horizontal-padding;
  padding-top: variables.$card-vertical-padding;
  padding-bottom: variables.$card-vertical-padding;
  width: 50%;
  max-width: variables.$max-width;
  min-width: variables.$min-width;
}

.content-container-card.white {
  border: 1px solid #000000;
  background-color: #ffffff;
  color: variables.$opposite-font-color;
  border-radius: 5px;
  box-shadow: variables.$box-shadow;
}

.content-container-card.white ::selection {
  background-color: variables.$opposite-font-color;
  color: variables.$font-color;
}

.content-container-card.white a {
  color: variables.$opposite-font-color;
}

.content-container-card.white a:visited {
  color: variables.$opposite-font-color;
}

.page-numbers {
  max-width: 700px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  margin-bottom: 5px;
  font-size: 27px;
}

.page-number-separator {
  padding-left: 5px;
  padding-right: 5px;
}

.pagination-buttons {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 15px;
  margin-right: 30px;
  margin-left: 30px;
}

.next-prev-button {
  font-size: 35px;
}

.first-last-button {
  font-size: 30px;
}

.page-number-link {
  cursor: pointer;
  text-decoration: underline;
  color: variables.$link-color;
}

.active-page-number {
  font-weight: bold;
}

.post {
  max-width: 700px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}

/* repeating posts (blog, links) */
.repeating-post {
  max-width: 700px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  border-top: variables.$small-divider-color;
}

.repeating-post:last-child {
  border-bottom: variables.$small-divider-color;
}

.repeating-post-title {
  margin-top: 10px;
  font-weight: bold;
  font-size: 28px;
  padding-top: 10px;
}

.post-summary {
  max-width: 700px;
  text-align: center;
}

@media screen and (min-width: 0px) and (max-width: 767px) {
  .repeating-post {
    max-width: 360px;
  }
}

.post-end {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  margin-bottom: 20px;
}
.post-end-img {
  width: 60px;
}

.post-image {
  display: block;
  max-width: 100%;
  max-height: 250px;
  margin-left: auto;
  margin-right: auto;
  padding-top: 10px;
  padding-bottom: 10px;
  border-radius: 20px;
  cursor: pointer;
}

.gallery-post-image {
  max-height: 500px;
}

.post-image-container {
  position: relative;
}

.image-count {
  position: absolute;
  bottom: 15px;
  right: 10px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 5px 10px;
  border-radius: 50%;
  font-size: 14px;
  font-weight: bold;
  cursor: pointer;
  pointer-events: none;
}

// for markdown in the blog post
.blog-post-content {
  img {
    display: block;
    max-width: 100%;
    max-height: 500px;
    margin-left: auto;
    margin-right: auto;
    padding-top: 10px;
    padding-bottom: 10px;
  }

  figcaption {
    font-size: 14px;
    font-style: italic;
    padding-bottom: 10px;
  }

  blockquote {
    border: 1px dashed #6d6d6d;
    padding: 10px;
  }

  h1 {
    margin-block-start: 18px;
    margin-block-end: 4px;
  }

  h2 {
    font-size: 32px;
    margin-block-start: 15px;
    margin-block-end: 4px;
  }

  h3 {
    font-size: 24px;
    margin-block-start: 15px;
    margin-block-end: 4px;
  }

  p {
    margin-block-start: 8px;
    margin-block-end: 8px;
  }
}

@mixin button-hover-effect($base-color, $lighten-percentage: 5%) {
  background-color: color.adjust($base-color, $lightness: $lighten-percentage);
}

@mixin button-active-effect($base-color, $darken-percentage: 5%) {
  background-color: color.adjust($base-color, $lightness: -$darken-percentage);
}

@mixin button-selected-effect($base-color) {
  box-shadow: 0 0 0 3px color.adjust($base-color, $lightness: -15%);
}

.button {
  width: 160px;

  display: inline-block;
  background-color: transparent;
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  font-weight: 500;
  padding: 10px;
  margin: 4px;
  font-size: 18px;
  text-align: center;
  border-color: #000 !important;
  color: #ffffff;
  cursor: pointer;

  box-shadow: variables.$button-box-shadow;

  &:disabled,
  &[disabled="disabled"] {
    background-color: rgba(56, 56, 56, 0.12) !important;
    color: rgba(65, 65, 65, 0.38);
    cursor: not-allowed;
    border-color: rgba(65, 65, 65, 0.2);
    opacity: 0.7;

    // Add these lines to override all color classes
    &.blue,
    &.purple,
    &.green,
    &.pink,
    &.magenta,
    &.red,
    &.hot-pink,
    &.dark-purple,
    &.light-blue {
      background-color: rgba(56, 56, 56, 0.12) !important;
    }

    // Keep your existing hover overrides
    &:hover,
    &:active {
      border-color: rgba(65, 65, 65, 0.2);
      background-color: rgba(56, 56, 56, 0.12);
    }

    // Override all color-specific hover effects
    &.blue:hover,
    &.purple:hover,
    &.green:hover,
    &.pink:hover,
    &.magenta:hover,
    &.red:hover,
    &.hot-pink:hover,
    &.dark-purple:hover,
    &.light-blue:hover {
      border-color: rgba(65, 65, 65, 0.2);
    }
  }

  &.on-black {
    // border-color: white;
    // color: white;

    &:disabled,
    &[disabled="disabled"] {
      // border-color: rgba(255, 255, 255, 0.3);
      // color: rgba(255, 255, 255, 0.5);
    }
  }

  &.on-white {
    // border-color: black;
    // color: black;
  }

  &.orange {
    background-color: variables.$button-orange;
    border-color: variables.$button-orange;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-orange);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-orange);
    }
    &.selected {
      @include button-selected-effect(variables.$button-orange);
    }
  }

  &.blue {
    background-color: variables.$button-blue;
    border-color: variables.$button-blue;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-blue);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-blue);
    }
    &.selected {
      @include button-selected-effect(variables.$button-blue);
    }
  }

  &.purple {
    background-color: variables.$button-purple;
    border-color: variables.$button-purple;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-purple);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-purple);
    }
    &.selected {
      @include button-selected-effect(variables.$button-purple);
    }
  }

  &.green {
    background-color: variables.$button-green;
    border-color: variables.$button-green;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-green);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-green);
    }
    &.selected {
      @include button-selected-effect(variables.$button-green);
    }
  }

  &.pink {
    background-color: variables.$button-pink;
    border-color: variables.$button-pink;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-pink);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-pink);
    }
    &.selected {
      @include button-selected-effect(variables.$button-pink);
    }
  }

  &.magenta {
    background-color: variables.$button-magenta;
    border-color: variables.$button-magenta;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(
        variables.$button-magenta
      ); // Adjust hover if needed or use the mixin
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-magenta);
    }
    &.selected {
      @include button-selected-effect(variables.$button-magenta);
    }
  }

  &.red {
    background-color: variables.$button-red;
    border-color: variables.$button-red;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-red);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-red);
    }
    &.selected {
      @include button-selected-effect(variables.$button-red);
    }
  }

  &.hot-pink {
    background-color: variables.$button-hot-pink;
    border-color: variables.$button-hot-pink;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(
        variables.$button-hot-pink
      ); // Adjust hover if needed or use the mixin
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-hot-pink);
    }
    &.selected {
      @include button-selected-effect(variables.$button-hot-pink);
    }
  }

  &.dark-purple {
    background-color: variables.$button-dark-purple;
    border-color: variables.$button-dark-purple;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(
        variables.$button-dark-purple
      ); // Adjust hover if needed or use the mixin
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-dark-purple);
    }
    &.selected {
      @include button-selected-effect(variables.$button-dark-purple);
    }
  }

  &.light-blue {
    background-color: variables.$button-light-blue;
    border-color: variables.$button-light-blue;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-light-blue);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-light-blue);
    }
    &.selected {
      @include button-selected-effect(variables.$button-light-blue);
    }
  }

  &.caribbean-green {
    background-color: variables.$button-caribbean-green;
    border-color: variables.$button-caribbean-green;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-caribbean-green);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-caribbean-green);
    }
    &.selected {
      @include button-selected-effect(variables.$button-caribbean-green);
    }
  }

  &.jade {
    background-color: variables.$button-jade;
    border-color: variables.$button-jade;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-jade);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-jade);
    }
    &.selected {
      @include button-selected-effect(variables.$button-jade);
    }
  }

  &.pastel-red {
    background-color: variables.$button-pastel-red;
    border-color: variables.$button-pastel-red;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-pastel-red);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-pastel-red);
    }
    &.selected {
      @include button-selected-effect(variables.$button-pastel-red);
    }
  }

  &.login-green {
    background-color: variables.$button-login-green;
    border-color: variables.$button-login-green;

    &:hover:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-hover-effect(variables.$button-login-green);
    }
    &:active:not(:disabled):not([disabled="disabled"]):not(.selected) {
      @include button-active-effect(variables.$button-login-green);
    }
    &.selected {
      @include button-selected-effect(variables.$button-login-green);
    }
  }

  &.transparent {
    background-color: transparent;
    color: #ffffff;
    border: none;
    padding: 0px;

    &:active {
      color: #6d6d6d;
    }
  }
}

// Basic Toggle Switch Styling
.toggle-switch {
  position: relative;
  width: 60px; // Width of the toggle
  height: 34px; // Height of the toggle
  vertical-align: middle; // Align with adjacent text

  &-checkbox {
    opacity: 0;
    width: 0;
    height: 0;

    &:checked + .toggle-switch-label .toggle-switch-inner {
      background-color: #4caf50; // Green when checked
    }

    &:focus + .toggle-switch-label .toggle-switch-inner {
      box-shadow: 0 0 1px #4caf50;
    }

    &:checked + .toggle-switch-label .toggle-switch-switch {
      transform: translateX(26px); // Move the switch handle
    }
  }

  &-label {
    display: flex; // Use flexbox for alignment
    align-items: center; // Vertically center items
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  &-inner {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: 0.4s;
    border-radius: 34px;
    // z-index: 1; // Ensure inner is behind switch and text
  }

  &-switch {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: 0.4s;
    border-radius: 50%;
    // z-index: 2; // Ensure switch is above inner
  }

  &-text {
    position: relative;
    // z-index: 2; // Ensure text is above inner
    margin-left: 70px; // Position text to the right of the switch (adjust as needed)
    font-weight: bold;
    color: #000; // Ensure text color is visible
    white-space: nowrap; // Prevent text wrapping
  }
}

// Basic Form Field Styling
.form-field {
  margin-bottom: 1rem; // Add some space below form fields

  label {
    display: block; // Make labels block elements
    margin-bottom: 0.3rem; // Space between label and input/select
    font-weight: 500; // Slightly bolder labels
    font-size: 14px;
    color: #333; // Darker label color for contrast on white background
    display: inline-block; // Allow labels next to radios
    margin-bottom: 0; // Reset margin for inline labels
  }

  input[type="text"],
  input[type="radio"], // Add radio type
  select {
    width: calc(100% - 22px); // Default width, accounting for padding and border
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    box-sizing: border-box; // Include padding and border in the element's total width and height
    background-color: #fff; // Ensure background is white
    color: #000; // Ensure text is black
    // Adjustments might be needed based on visual preference for radio buttons
  }

  input[type="radio"] {
    // Specific styles for radio if needed, e.g., size
    width: auto; // Ensure radio buttons don't stretch full width by default
    vertical-align: middle; // Align nicely with text
  }

  input[type="text"]:focus,
  input[type="radio"]:focus, // Add radio type
  select:focus {
    border-color: variables.$accent-color; // Highlight focus
    outline: none; // Remove default outline
    box-shadow: 0 0 0 2px rgba(137, 37, 196, 0.2); // Optional: add a subtle glow on focus
  }

  // Style for disabled state if needed
  input[type="text"]:disabled,
  input[type="radio"]:disabled, // Add radio type
  select:disabled {
    background-color: #eee;
    cursor: not-allowed;
  }
}

// Specific adjustments for selects
select {
  appearance: none; // Remove default system appearance
  background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%23333" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg>'); // Custom dropdown arrow
  background-repeat: no-repeat;
  background-position: right 10px center;
  background-size: 16px 12px;
  padding-right: 30px; // Make space for the custom arrow
}

// Adjustments for white card context
.content-container-card.white {
  // ... existing styles ...
  .form-field label {
    color: #333; // Ensure label color is readable on white
  }

  .form-field input[type="text"],
  .form-field select {
    background-color: #fff;
    color: #000;
    border-color: #ccc;
  }

  .form-field input[type="text"]:focus,
  .form-field select:focus {
    border-color: variables.$accent-color; // Keep focus color consistent
    box-shadow: 0 0 0 2px rgba(137, 37, 196, 0.2);
  }
}

.search-container {
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-container input[type="text"] {
  width: 80%;
  padding: 12px 20px;
  margin: 8px 0;
  box-sizing: border-box;
  font-size: 16px;
}

/* footer */
.footer {
  margin-top: 40px;
  text-align: center;
  font-size: 16px;
}

/* for smaller sections */
.section-footer {
  padding-top: 20px;
  text-align: center;
}

.copyright {
  margin-bottom: 10px;
}

/* tooltip */
.ng-tooltip {
  position: fixed;
  border-radius: 5px;
  padding: 10px;
  color: #ffffff;
  background-color: #504f4f;
  opacity: 0;
  transition: opacity 0.3s;
  font-size: 14px;
  z-index: 9999;
}
.ng-tooltip-show {
  opacity: 1;
}

@media screen and (min-width: 0px) and (max-width: 767px) {
  .below-avatar-text {
    display: block;
    padding-top: 5px;
    padding-bottom: 5px;
  }
  .divider {
    display: none;
  }
  .content-container-card {
    padding-left: 10px;
    padding-right: 2px;
    font-size: 15px;
    width: 90%;
    margin: 0 auto;
  }
  blockquote {
    min-width: 310px;
    text-align: center;
    margin: 0 auto;
  }
}

circle {
  stroke: variables.$accent-color;
}
